from collections import OrderedDict

PH_POTENTIAL_RESOLUTIONS = ["1080", "720", "480", "240", "180"]

PH_VIDEO_URL_REGEX = "var player_quality_%sp = '([^']+)'"

def NormalizeURL(url):

	return url

def MetadataObjectForURL(url):

	html =		HTML.ElementFromURL(url)

	title =		html.xpath('//title/text()')[0].strip()
	thumbnail =	html.xpath('//meta[@property="og:image"]/@content')[0].strip()
	#tags =		html.xpath('//div[@id="media-tags-container"]/h4/a/text()')

	return VideoClipObject(
		title =			title,
		summary =		title,
		thumb =			Resource.ContentsOfURLWithFallback([thumbnail], fallback='icon-default.jpg'),
		content_rating =	'X'
		#tags =			tags
	)

@deferred
def MediaObjectsForURL(url):
	
	availableResolutions =	OrderedDict([])
	mediaObjects =		[]
	
	data =		HTTP.Request(url).content
	
	for resolution in PH_POTENTIAL_RESOLUTIONS:
		video = Regex(PH_VIDEO_URL_REGEX % resolution).search(data)
		
		if video:
			availableResolutions[resolution] = video.group(1)
	
	for resolution, videoURL in availableResolutions.items():
		mediaObjects.append(MediaObject(
			container =			Container.MP4,
			video_codec =			VideoCodec.H264,
			video_resolution =		resolution,
			audio_codec =			AudioCodec.AAC,
			audio_channels =			2,
			optimized_for_streaming =	True if Client.Product not in ['Plex Web'] else False,
			parts = [
				PartObject(
					key =	videoURL
				)
			]
		))
	
	return mediaObjects
	
	raise Ex.MediaNotAvailable